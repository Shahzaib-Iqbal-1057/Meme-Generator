{"ast":null,"code":"var _jsxFileName = \"/Users/shafiqaiqbal/my-react-app/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport \"./style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Navbar = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"navbar\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Meme Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"React Course Project-3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 11\n  }, this);\n};\n\n_c = Navbar;\n\nconst Meme = () => {\n  _s();\n\n  const [meme_data, setMemeData] = React.useState({\n    meme_url: \"https://i.imgflip.com/25w3.jpg\",\n    top_text: \"\",\n    bottom_text: \"\",\n    memes: {}\n  });\n  console.log(\"component reRendered\");\n  React.useEffect(function () {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json()).then(data => setMemeData(function (prev_data) {\n      return { ...prev_data,\n        memes: data\n      };\n    }));\n  }, []);\n\n  const handleClick = event => {\n    const random = Math.floor(Math.random() * meme_data.memes.data.memes.length);\n    const newUrl = meme_data.memes.data.memes[random].url;\n    const {\n      name,\n      value,\n      type\n    } = event.target;\n    setMemeData(function (prev_data) {\n      if (type === \"button\") {\n        return {\n          meme_url: newUrl,\n          top_text: \"\",\n          bottom_text: \"\"\n        };\n      } else {\n        return { ...prev_data,\n          [name]: value\n        };\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"top text\",\n          className: \"left\",\n          name: \"top_text\",\n          onChange: handleClick,\n          value: meme_data.top_text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"bottom text\",\n          className: \"right\",\n          name: \"bottom_text\",\n          onChange: handleClick,\n          value: meme_data.bottom_text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick,\n        name: \"meme_url\",\n        type: \"button\",\n        children: \"Get a new meme image \\uD83D\\uDDBC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: meme_data.meme_url,\n      alt: \"Meme\",\n      className: \"meme-image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"meme--text top\",\n      children: meme_data.top_text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"meme--text bottom\",\n      children: meme_data.bottom_text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Meme, \"QXqSBl1qmQv4jvpEuydD/CDgB70=\");\n\n_c2 = Meme;\n\nconst Element = /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 3\n  }, this), /*#__PURE__*/_jsxDEV(Meme, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 3\n  }, this)]\n}, void 0, true);\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(Element);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Navbar\");\n$RefreshReg$(_c2, \"Meme\");","map":{"version":3,"names":["React","ReactDOM","Navbar","Meme","meme_data","setMemeData","useState","meme_url","top_text","bottom_text","memes","console","log","useEffect","fetch","then","res","json","data","prev_data","handleClick","event","random","Math","floor","length","newUrl","url","name","value","type","target","Element","root","createRoot","document","getElementById","render"],"sources":["/Users/shafiqaiqbal/my-react-app/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM  from 'react-dom/client';\nimport \"./style.css\";\n\nconst Navbar = () =>\n{\n  return (<div className='navbar'>\n    <h1>Meme Generator</h1>\n    <p>React Course Project-3</p>\n  </div>) \n}\nconst Meme = () =>\n{\n  const [meme_data,setMemeData] = React.useState({\n  meme_url : \"https://i.imgflip.com/25w3.jpg\",\n  top_text : \"\",\n  bottom_text : \"\",\n  memes : {}\n  });\n  console.log(\"component reRendered\")\n  React.useEffect(function()\n  {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then(res => res.json())\n      .then(data => setMemeData(function(prev_data)\n      {\n        return {\n          ...prev_data,\n          memes : data\n        }\n      }))\n  },[])\n  const handleClick = (event) =>\n  {\n    const random = Math.floor(Math.random()*meme_data.memes.data.memes.length)\n    const newUrl = meme_data.memes.data.memes[random].url\n    const {name,value,type} = event.target\n    setMemeData(function(prev_data)\n    {\n      if(type === \"button\")\n      {\n        return {\n          meme_url : newUrl,\n          top_text : \"\",\n          bottom_text : \"\"\n        \n        }\n      }\n      else\n      {\n        return {\n          ...prev_data,\n          [name] : value\n        }\n      }\n    })\n  }\n  return (\n  <>\n    <div className='meme'>\n      <div className='input'>\n        <input type=\"text\" placeholder= \"top text\" className='left' name= \"top_text\" onChange={handleClick} value = {meme_data.top_text}></input>\n        <input type=\"text\" placeholder='bottom text' className='right' name= \"bottom_text\" onChange={handleClick} value = {meme_data.bottom_text}></input>\n      </div> \n      <button onClick={handleClick} name = \"meme_url\" type = \"button\">Get a new meme image ðŸ–¼</button>\n    </div> \n      <img src = {meme_data.meme_url} alt = \"Meme\" className='meme-image'/>\n      <h2 className=\"meme--text top\">{meme_data.top_text}</h2>\n      <h2 className=\"meme--text bottom\">{meme_data.bottom_text}</h2>\n  </>\n  )\n}\nconst Element = <>\n  <Navbar/>\n  <Meme/>\n</>\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(Element)\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}